class MaxHeap
{
    int []arr;
    int maxsize,heapsize;
    MaxHeap(int ms)
    {
        maxsize=ms;
        heapsize=0;
        arr=new int[maxsize];
    }
    int parent(int i)
    {
        return (i-1)/2;
    }
    int left(int i)
    {
        return (2*i+1);
    }
    int right(int i)
    {
        return (2*i+1);
    }
    int insertkey(int x)
    {
        if(heapsize==maxsize)
        {
            System.out.println("heap area is full");
            return 0;
        }
        int i=heapsize;
        arr[i]=x;
        heapsize++;
        while(i!=0&&arr[parent(i)]<arr[i])
        {
            int temp=arr[i];
            arr[i]=arr[parent(i)];
            arr[parent(i)]=temp;
            i=parent(i);
        }
        return x;
    }
    void removeMAx()
    {
        if(heapsize<=0)
        {
            System.out.println("no heap memory");
        }
        else if(heapsize==1)
        {
            heapsize--;
        }
        else
        {
            arr[0]=arr[heapsize-1];
            heapsize--;
            Maxheapify(0);
        }
        }
        void Maxheapify(int i)
        {
            int l=left(i);
            int r=right(i);
            int largest=i;
            if(l<heapsize&&arr[l]>arr[largest])
            {
                largest=l;
            }
              if(r<heapsize&&arr[r]>arr[largest])
            {
                largest=r;
            }
            if(largest!=i)
            {
                int temp=arr[largest];
                arr[largest]=arr[i];
                arr[i]=temp;
                Maxheapify(largest);
            }
        }
        int getMax()
        {
        return arr[0];
        }
        int currsize()
        {
            return heapsize;
        }
        public static void main(String args[])
        {
            MaxHeap h=new MaxHeap(30);
            int arr1[]={3,10,12,8,2,14};
            for(int e:arr1)
            {
                System.out.println(h.insertkey(e)+" ");
                
            }
            System.out.println("the current size of the heap is"+h.currsize());
            System.out.println("the current max element  is"+h.getMax());
            h.removeMAx();
            System.out.println("the current size of the heap is"+h.currsize());
             h.insertkey(15);
              h.insertkey(5);
              System.out.println("the current size of the heap is"+h.currsize());
            System.out.println("the current max element  is"+h.getMax());
        }
    }
